import torch
from torch import nn
from torchvision import datasets, transforms
from torch.utils.data import DataLoader


transform = transforms.ToTensor()
train_data = datasets.MNIST(root="data", train=True, download=True, transform=transform)
train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
test_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
test_loader = DataLoader(test_dataset, batch_size=1000, shuffle=False)

class DigitModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.net = nn.Sequential(
            nn.Flatten(),               # 28x28 â†’ 784
            nn.Linear(784, 128),        # Hidden layer
            nn.ReLU(),                  # Activation
            nn.Linear(128, 10)          # Output layer (10 digits)
        )

    def forward(self, x):
        return self.net(x)


model = DigitModel()


optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
criterion = nn.CrossEntropyLoss()


device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

for epoch in range(15):
    model.train()
    running_loss = 0.0

    for images, labels in train_loader:
        images = images.to(device)
        labels = labels.to(device)

        outputs = model(images)
        loss = criterion(outputs, labels)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        running_loss += loss.item()


    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for images, labels in test_loader:
            images = images.to(device)
            labels = labels.to(device)

            outputs = model(images)
            predicted = torch.argmax(outputs, dim=1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    print(f"Epoch {epoch+1}/{15} - Loss: {running_loss:.4f} - Accuracy: {accuracy:.2f}%")

torch.save(model.state_dict(), "mnist_model.pth")

torch.save(model.state_dict(), "mnist_model.pth")
print("Model saved as mnist_model.pth")
